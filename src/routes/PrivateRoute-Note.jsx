/* 
প্রাইভেট রাউট বা প্রটেক্টেড রাউন্ড নেয়ার মূল উদ্দেশ্য হচ্ছে যদি 
সে context-এর ইউজার হয়ে থাকে তাহলে তাকে সামনে অর্থাৎ 
এক বা একাধিক route-এ যেতে দেয়া হবে। তা না হলে তাকে login-এ পাঠিয়ে দেয়া হবে, 
আগে login করো তারপর অন্যান্য route-এ যাও..............
*/

/* 1
context-এর ইউজার হয়ে থাকলে chidren-এ যাবে নাহলে পরের রিটার্ন এর শর্ত 
অনুসারে যাও উদাহরণ হিসেবে news router অর্থাৎ
<PrivateRoute><News></News></PrivateRoute>
 কে প্রাইভেট রাউটার এর অন্তর্ভুক্ত করেছি,
 এখন যাবতীয় খেলা হবে এই <News></News> রাউটারকে ঘিরে.,,,,,,,,,.........

 Main.jsx-a
 routes রাউটারে তো  <News></News> চিল্ড্রেন তাই সেটাতে যাওয়ার আগে প্যারেন্ট হিসেবে 
  <PrivateRoute></PrivateRoute>-এ আগে গিয়ে শর্ত পূরণ  করার চেষ্টা করবে 
  যদি শর্ত পূরণ হয়ে যায় তাহলে <News></News> যে প্রবেশ করবে 


*///

/* 
const location = useLocation();
    console.log(location);
    ইউজার কোথায় যেতে চাই সেই তথ্য এই লোকেশন থেকে পাওয়া যায়, location 
    এর ভ্যালু নেভিগেট এ স্পেশাল  প্রপারটি এর মধ্যে সেট করে দিতে পারি, 
এবং সেই প্রোপারটির নাম state. state-এ ডায়নামিক ভাবে অবজেক্ট নিলাম,
 object এর নাম দিলাম from, and value হিসেবে location কে নিলাম
 তার মানে state এর মধ্যে সেট করছি একটা অবজেক্ট, সেই অবজেক্ট 
 এর প্রপারটি from এবং from-এর value location

 যাবতীয় কাজ আমরা <Navigate state={{from: location}} to="/login"></Navigate>
  এ মধ্যে set করেছি এটা তখনই কাজ করবে যখন login-এ যাবে অর্থাৎ
PrivateRoute থেকে navigate করে পাঠাচ্ছি login-এ
 তো গেল login-a, প্রথমে কিন্তু state null ছিল এখন যাওয়ার পরে 
 state এর মধ্যে কিছু একটা আসছে তার মানে user কোথা থেকে আসছে এবং 
 কোথায় যেতে চাচ্ছে তার  যাবতীয় তথ্য এই state এর মধ্যে রয়েছে 

    const from = location.state?.from?.pathname || 'category/0';
 তো এখন  অপশনাল চেইনিং এর মাধ্যমে from অবজেক্ট কে
   ডিস্ট্রাকচার করে ওর হিসাবে যে জায়গায় পাঠাতে চাও সেটা উল্লেখ করে
    ব্যবহার করলেই এই প্রাইভেট রাউটারের যাবতীয় খেলা শেষ 

*/